df = tibble(files = list.files(here, recursive = TRUE, pattern = prefix,  full = TRUE))
if(is.null(prefix)){ prefix = ""}
df = df %>%
mutate(subdir  = gsub(".tif", "", basename(files)),
subdir  = gsub(paste0(prefix, "_"), "", subdir),
year  = format(as.Date(subdir), "%Y"),
month = format(as.Date(subdir), "%m"))
if(!is.null(date)){
df =  df %>%
dplyr::filter(month %in% unique(format(as.Date(NULL), "%m"))) %>%
dplyr::filter(year %in% unique(format(as.Date(date), "%Y")))
}
df = df %>%
group_by(year,month) %>%
mutate(subdir = paste(year,month,"01", sep = "-")) %>%
mutate(days_in_month = .ndays(subdir))
df$g = dplyr::group_indices(df)
message(length(unique(df$g)), " months to process...")
for(i in unique(df$g)){
subs   = filter(df, g == i)
suppressWarnings({
o = (sum(stack(subs$files)/8) * subs$days_in_month[1])
writeRaster(o,file.path(out, basename(subs$files[1])))
})
message(subs$subdir[1], " complete")
}
}
# 8 day to monthly
day8_to_month(product, "gridmet")
day8_to_month
dir
product
date
prefix
if(length(date) == 1){ date = c(date, date) }
here = file.path(dir,  "MODIS", product, "mosaics")
out = file.path(dir,   "MODIS", product, "monthly_means")
dir.create(out, showWarnings = FALSE)
df = tibble(files = list.files(here, recursive = TRUE, pattern = prefix,  full = TRUE))
if(is.null(prefix)){ prefix = ""}
df = df %>%
mutate(subdir  = gsub(".tif", "", basename(files)),
subdir  = gsub(paste0(prefix, "_"), "", subdir),
year  = format(as.Date(subdir), "%Y"),
month = format(as.Date(subdir), "%m"))
if(!is.null(date)){
df =  df %>%
dplyr::filter(month %in% unique(format(as.Date(NULL), "%m"))) %>%
dplyr::filter(year %in% unique(format(as.Date(date), "%Y")))
}
df = df %>%
group_by(year,month) %>%
mutate(subdir = paste(year,month,"01", sep = "-")) %>%
mutate(days_in_month = .ndays(subdir))
df$g = dplyr::group_indices(df)
message(length(unique(df$g)), " months to process...")
load_all()
rm(list = c(".ndays", "day8_to_month"))
rm(list = c(".ndays", "day8_to_month"))
load_all()
# 8 day to monthly
day8_to_month(product, "gridmet")
# 8 day to monthly
day8_to_month(product, prefix  = "gridmet")
prefix
# 8 day to monthly
day8_to_month(product, prefix = "gridmet")
day8_to_month
# 8 day to monthly
day8_to_month(product = product, prefix = "gridmet")
prefix
date
product
dir
if(length(date) == 1){ date = c(date, date) }
here = file.path(dir,  "MODIS", product, "mosaics")
out = file.path(dir,   "MODIS", product, "monthly_means")
dir.create(out, showWarnings = FALSE)
df = tibble(files = list.files(here, recursive = TRUE, pattern = prefix,  full = TRUE))
if(is.null(prefix)){ prefix = ""}
df = df %>%
mutate(subdir  = gsub(".tif", "", basename(files)),
subdir  = gsub(paste0(prefix, "_"), "", subdir),
year  = format(as.Date(subdir), "%Y"),
month = format(as.Date(subdir), "%m"))
if(!is.null(date)){
df =  df %>%
dplyr::filter(month %in% unique(format(as.Date(NULL), "%m"))) %>%
dplyr::filter(year %in% unique(format(as.Date(date), "%Y")))
}
df = df %>%
group_by(year,month) %>%
mutate(subdir = paste(year,month,"01", sep = "-")) %>%
mutate(days_in_month = .ndays(subdir))
df$g = dplyr::group_indices(df)
message(length(unique(df$g)), " months to process...")
for(i in unique(df$g)){
subs   = filter(df, g == i)
suppressWarnings({
o = (sum(stack(subs$files)/8) * subs$days_in_month[1])
writeRaster(o,file.path(out, basename(subs$files[1])))
})
message(subs$subdir[1], " complete")
}
i
subs   = filter(df, g == i)
o = (sum(stack(subs$files)/8) * subs$days_in_month[1])
stack(subs$files)
subs$files
o = (sum(raster::stack(subs$files)/8) * subs$days_in_month[1])
writeRaster(o,file.path(out, basename(subs$files[1])))
day8_to_month = function(dir = geo_path(),
product = NULL,
date = NULL,
prefix = NULL){
if(length(date) == 1){ date = c(date, date) }
here = file.path(dir,  "MODIS", product, "mosaics")
out = file.path(dir,   "MODIS", product, "monthly_means")
dir.create(out, showWarnings = FALSE)
df = tibble(files = list.files(here, recursive = TRUE, pattern = prefix,  full = TRUE))
if(is.null(prefix)){ prefix = ""}
df = df %>%
mutate(subdir  = gsub(".tif", "", basename(files)),
subdir  = gsub(paste0(prefix, "_"), "", subdir),
year  = format(as.Date(subdir), "%Y"),
month = format(as.Date(subdir), "%m"))
if(!is.null(date)){
df =  df %>%
dplyr::filter(month %in% unique(format(as.Date(NULL), "%m"))) %>%
dplyr::filter(year %in% unique(format(as.Date(date), "%Y")))
}
df = df %>%
group_by(year,month) %>%
mutate(subdir = paste(year,month,"01", sep = "-")) %>%
mutate(days_in_month = .ndays(subdir))
df$g = dplyr::group_indices(df)
message(length(unique(df$g)), " months to process...")
for(i in unique(df$g)){
subs   = filter(df, g == i)
suppressWarnings({
o = (sum(raster::stack(subs$files)/8) * subs$days_in_month[1])
raster::writeRaster(o,file.path(out, basename(subs$files[1])))
})
message(subs$subdir[1], " complete")
}
}
# 8 day to monthly
day8_to_month(product = product, prefix = "gridmet")
overwrite = FALSE
overwrite
file.exists(dest)
overwrite
all(overwrite, file.exists(dest)
)
file.exists(dest)
!file.exists(dest) | all(overwrite, file.exists(dest))
file.exists(dest)
load_all()
rm(list = c("day8_to_month"))
load_all()
load_all()
# 8 day to monthly
day8_to_month(product = product, prefix = "gridmet")
date
if(is.null(date)){stop("date must be specified")}
install.packages('rcompendium')
rcompendium::add_dependencies_badge()
usethis::use_readme_rmd()
rcompendium::add_dependencies_badge()
rcompendium::add_github_actions_check()
rcompendium::add_github_actions_badge()
rcompendium::add_github_actions_check_badge()
rcompendium::add_github_actions_pkgdown()
rcompendium::add_github_actions_pkgdown_badge()
rcompendium::add_license_badge()
rcompendium::add_lifecycle_badge("active")
rcompendium::add_lifecycle_badge()
rcompendium::add_repostatus_badge()
check()
usethis::use_vignette("characteristics", "Catchment Characteristics")
pkgdown::build_site()
pkgdown::build_site()
check()
document()
document()
document()
check()
check()
document()
check()
downloadMODIS
extent    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res  = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res  = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
abs((ext[1] - ext[3])
}
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
}
abs(ext[1] - ext[3])
abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2]
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2])
}
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
dim
dim = c(abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2])
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
is.null(dim) & is.null(res)
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
tmp == dim
sum(tmp == dim) == 2
make_grid = function(ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res    = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0
file = '/Volumes/Transcend/ngen/gridmet_elevation.nc'
raster::raster(file)
raster::extent(file)
r = raster::raster(file)
list(ext = raster::extent(r),
dim = raster::dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
raster::dim
dim(r)[1:2]
list(ext = raster::extent(r),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
make_grid = function(file =
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid(file)
make_grid(file = file)
make_grid = function(file = NULL
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid = function(file = NULL,
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1], abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){ stop('dim and res do not agree') }
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1], abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
res = c(abs(ext[1] - ext[3]) / dim[1], abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid(file = file)
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0
make_grid = function(file = NULL,
ext = NULL,
dimXY = NULL,
resXY = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[1:2],
resXY = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dimXY) & is.null(resXY)){ stop("dimXY or resXY must be provided") }
if(is.null(dimXY) & is.null(resXY)){
tmp = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
if(sum(tmp == dimXY) == 2){ stop('dimXY and resXY do not agree') }
}
if(is.null(dimXY)){
dimXY = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
}
if(is.null(res)){
resXY = c(abs(ext[1] - ext[3]) / dimXY[1], abs(ext[2] - ext[4]) / dimXY[2])
}
list(ext = extent, dimXY = dimXY, resXY = resXY, prj = prj)
}
}
make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
make_grid(file = file)
r
dim(r)[2:1]
#'
#' @param file file path
#' @param ext c(xmin, ymin, xmax, ymax)
#' @param dimXY c(width, height)
#' @param resXY c(xres, yres)
#' @param prj srs_def
#' @return
#' @export
#'
#' @examples
make_grid = function(file = NULL,
ext = NULL,
dimXY = NULL,
resXY = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[2:1],
resXY = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dimXY) & is.null(resXY)){ stop("dimXY or resXY must be provided") }
if(is.null(dimXY) & is.null(resXY)){
tmp = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
if(sum(tmp == dimXY) == 2){ stop('dimXY and resXY do not agree') }
}
if(is.null(dimXY)){
dimXY = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
}
if(is.null(res)){
resXY = c(abs(ext[1] - ext[3]) / dimXY[1], abs(ext[2] - ext[4]) / dimXY[2])
}
list(ext = extent, dimXY = dimXY, resXY = resXY, prj = prj)
}
}
make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
make_grid(file = file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[2:1],
resXY = raster::res(r),
prj = as.character(raster::crs(r)))
file
#---------------------------------------------------------
### Basic paths, AOI, and spatial grid
prefix = "gridmet"
gridmet_grid = make_grid(file = "/Volumes/Transcend/ngen/gridmet_elevation.nc")
gridmet_grid
grid
grid = gridmet_grid
document()
rm(list = c("make_grid"))
rm(list = c("make_grid"))
document()
check()
document()
check()
document()
document()
build_site()
pkgdown::build_site()
document()
pkgdown::build_site()
pkgdown::build_site()
document()
source('~/github/geogrids/R/cache.R')
check()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
xx = geo_cache_list(pattern = "pr.+nc$") %>%
filter(!grepl("annual|normal", subdir))
