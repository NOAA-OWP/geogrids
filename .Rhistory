df =  df %>%
dplyr::filter(month %in% unique(format(as.Date(NULL), "%m"))) %>%
dplyr::filter(year %in% unique(format(as.Date(date), "%Y")))
}
df = df %>%
group_by(year,month) %>%
mutate(subdir = paste(year,month,"01", sep = "-")) %>%
mutate(days_in_month = .ndays(subdir))
df$g = dplyr::group_indices(df)
message(length(unique(df$g)), " months to process...")
for(i in unique(df$g)){
subs   = filter(df, g == i)
suppressWarnings({
o = (sum(raster::stack(subs$files)/8) * subs$days_in_month[1])
raster::writeRaster(o,file.path(out, basename(subs$files[1])))
})
message(subs$subdir[1], " complete")
}
}
# 8 day to monthly
day8_to_month(product = product, prefix = "gridmet")
overwrite = FALSE
overwrite
file.exists(dest)
overwrite
all(overwrite, file.exists(dest)
)
file.exists(dest)
!file.exists(dest) | all(overwrite, file.exists(dest))
file.exists(dest)
load_all()
rm(list = c("day8_to_month"))
load_all()
load_all()
# 8 day to monthly
day8_to_month(product = product, prefix = "gridmet")
date
if(is.null(date)){stop("date must be specified")}
install.packages('rcompendium')
rcompendium::add_dependencies_badge()
usethis::use_readme_rmd()
rcompendium::add_dependencies_badge()
rcompendium::add_github_actions_check()
rcompendium::add_github_actions_badge()
rcompendium::add_github_actions_check_badge()
rcompendium::add_github_actions_pkgdown()
rcompendium::add_github_actions_pkgdown_badge()
rcompendium::add_license_badge()
rcompendium::add_lifecycle_badge("active")
rcompendium::add_lifecycle_badge()
rcompendium::add_repostatus_badge()
check()
usethis::use_vignette("characteristics", "Catchment Characteristics")
pkgdown::build_site()
pkgdown::build_site()
check()
document()
document()
document()
check()
check()
document()
check()
downloadMODIS
extent    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res  = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res  = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
abs((ext[1] - ext[3])
}
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
}
abs(ext[1] - ext[3])
abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2]
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2])
}
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
dim
dim = c(abs(ext[1] - ext[3]) / res[1]
abs(ext[2] - ext[4]) / res[2])
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
grid0 <- list(ext = extent,
dim = dim,
res = res,
proj = "+proj=laea +lon_0=147 +lat_0=-42")
grid0
c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
is.null(dim) & is.null(res)
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
tmp == dim
sum(tmp == dim) == 2
make_grid = function(ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083)
res    = c(0.04166667, 0.04166667)
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0
file = '/Volumes/Transcend/ngen/gridmet_elevation.nc'
raster::raster(file)
raster::extent(file)
r = raster::raster(file)
list(ext = raster::extent(r),
dim = raster::dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
raster::dim
dim(r)[1:2]
list(ext = raster::extent(r),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
make_grid = function(file =
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid(file)
make_grid(file = file)
make_grid = function(file = NULL
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){
stop('dim and res do not agree')
}
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1],
abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
dim = c(abs(ext[1] - ext[3]) / dim[1],
abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid = function(file = NULL,
ext = NULL,
dim = NULL,
res = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dim = dim(r)[1:2],
res = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dim) & is.null(res)){ stop("dim or res must be provided") }
if(is.null(dim) & is.null(res)){
tmp = c(abs(ext[1] - ext[3]) / res[1], abs(ext[2] - ext[4]) / res[2])
if(sum(tmp == dim) == 2){ stop('dim and res do not agree') }
}
if(is.null(dim)){
dim = c(abs(ext[1] - ext[3]) / res[1], abs(ext[2] - ext[4]) / res[2])
}
if(is.null(res)){
res = c(abs(ext[1] - ext[3]) / dim[1], abs(ext[2] - ext[4]) / dim[2])
}
list(ext = extent, dim = dim, res = res, prj = prj)
}
}
make_grid(file = file)
grid0 = make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
grid0
make_grid = function(file = NULL,
ext = NULL,
dimXY = NULL,
resXY = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[1:2],
resXY = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dimXY) & is.null(resXY)){ stop("dimXY or resXY must be provided") }
if(is.null(dimXY) & is.null(resXY)){
tmp = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
if(sum(tmp == dimXY) == 2){ stop('dimXY and resXY do not agree') }
}
if(is.null(dimXY)){
dimXY = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
}
if(is.null(res)){
resXY = c(abs(ext[1] - ext[3]) / dimXY[1], abs(ext[2] - ext[4]) / dimXY[2])
}
list(ext = extent, dimXY = dimXY, resXY = resXY, prj = prj)
}
}
make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
make_grid(file = file)
r
dim(r)[2:1]
#'
#' @param file file path
#' @param ext c(xmin, ymin, xmax, ymax)
#' @param dimXY c(width, height)
#' @param resXY c(xres, yres)
#' @param prj srs_def
#' @return
#' @export
#'
#' @examples
make_grid = function(file = NULL,
ext = NULL,
dimXY = NULL,
resXY = NULL,
prj = NULL){
if(!is.null(file)){
r = raster::raster(file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[2:1],
resXY = raster::res(r),
prj = raster::crs(r))
} else {
if(is.null(prj)){ stop("prj is required") }
if(is.null(ext)){ stop("ext is required") }
if(is.null(dimXY) & is.null(resXY)){ stop("dimXY or resXY must be provided") }
if(is.null(dimXY) & is.null(resXY)){
tmp = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
if(sum(tmp == dimXY) == 2){ stop('dimXY and resXY do not agree') }
}
if(is.null(dimXY)){
dimXY = c(abs(ext[1] - ext[3]) / resXY[1], abs(ext[2] - ext[4]) / resXY[2])
}
if(is.null(res)){
resXY = c(abs(ext[1] - ext[3]) / dimXY[1], abs(ext[2] - ext[4]) / dimXY[2])
}
list(ext = extent, dimXY = dimXY, resXY = resXY, prj = prj)
}
}
make_grid(
ext    = c(-124.7875, 25.04583,-67.0375, 49.42083),
res    = c(0.04166667, 0.04166667),
prj = '+proj=longlat +ellps=WGS84 +no_defs'
)
make_grid(file = file)
list(ext = as.vector(raster::extent(r)),
dimXY = dim(r)[2:1],
resXY = raster::res(r),
prj = as.character(raster::crs(r)))
file
#---------------------------------------------------------
### Basic paths, AOI, and spatial grid
prefix = "gridmet"
gridmet_grid = make_grid(file = "/Volumes/Transcend/ngen/gridmet_elevation.nc")
gridmet_grid
grid
grid = gridmet_grid
document()
rm(list = c("make_grid"))
rm(list = c("make_grid"))
document()
check()
document()
check()
document()
document()
build_site()
pkgdown::build_site()
document()
pkgdown::build_site()
pkgdown::build_site()
document()
source('~/github/geogrids/R/cache.R')
check()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
xx = geo_cache_list(pattern = "pr.+nc$") %>%
filter(!grepl("annual|normal", subdir))
AOI = AOI::aoi_get(state = "NY")
AOI
outdir = '/Volumes/Transcend/ngen/climate/DEM/1/'
ormalizePath(paste0(raw.dir, "/", res), mustWork = FALSE)
raw.dir <- normalizePath(paste0(raw.dir, "/", res), mustWork = FALSE)
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
raw.dir
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
res = "1"
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
raw.dir
get_ned <- function(AOI,
res = "1",
outdir = '/Volumes/Transcend/ngen/climate/DEM/',
raster.options = c(
"COMPRESS=DEFLATE",
"ZLEVEL=9",
"INTERLEAVE=BAND"
)) {
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
extraction.dir <- normalizePath(paste0(extraction.dir, "/."), mustWork = FALSE)
dir.create(raw.dir, showWarnings = FALSE, recursive = TRUE)
dir.create(extraction.dir, showWarnings = FALSE, recursive = TRUE)
template <- sp::spTransform(polygon_from_extent(template), sp::CRS("+proj=longlat +ellps=WGS84"))
extent.latlon <- raster::extent(template)
if (file.exists(paste0(extraction.dir, "/", label, "_NED_", res, ".tif")) & !force.redo) {
extracted.DEM <- raster::raster(paste0(extraction.dir, "/", label, "_NED_", res, ".tif"))
return(extracted.DEM)
}
# Open USGS NED download service.  NED tiles are labeled by their northwest corner. Thus, coordinate 36.42N, -105.71W is in
# grid n37w106
wests <- seq(ceiling(abs(extent.latlon@xmax)), ceiling(abs(extent.latlon@xmin)))
norths <- seq(ceiling(abs(extent.latlon@ymin)), ceiling(abs(extent.latlon@ymax)))
tilesLocations <- as.matrix(expand.grid(norths, wests, stringsAsFactors = FALSE))
message("Area of interest includes ", nrow(tilesLocations), " NED tiles.")
# Download and crop tiles
loc <- NULL
tiles <- foreach::foreach(loc = 1:nrow(tilesLocations)) %do% {
return(tryCatch(get_ned_tile(
template = template,
res = res,
tileNorthing = tilesLocations[loc, 1],
tileWesting = tilesLocations[loc, 2],
raw.dir = raw.dir
),
error = function(e) {
message("WARNING: ", e$message)
return(NULL)
},
warning = function(w) NULL
))
}
if (all(sapply(tiles, is.null))) {
stop("No NED tiles are available for your study area. Please check your input data and internet connection.")
}
tiles <- tiles[which(!sapply(tiles, is.null))]
# Mosaic all tiles
if (length(tiles) > 1) {
message("Mosaicking NED tiles.")
utils::flush.console()
tiles$fun <- mean
names(tiles)[1:2] <- c("x", "y")
tiles <- do.call(raster::mosaic, tiles)
gc()
} else {
tiles <- tiles[[1]]
}
tiles <- tryCatch(tiles %>% raster::crop(y = template %>% sp::spTransform(CRSobj = tiles %>% raster::projection()), snap = "out"),
error = function(e) {
tiles %>% raster::crop(y = template %>% sp::spTransform(CRSobj = tiles %>% raster::projection()))
}
)
raster::writeRaster(tiles,
paste(extraction.dir, "/", label, "_NED_", res, ".tif", sep = ""),
datatype = "FLT4S",
options = raster.options,
overwrite = T,
setStatistics = FALSE
)
return(tiles)
}
outdir = '/Volumes/Transcend/ngen/climate/DEM/'
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
template <- st_transform(AOI, "+proj=longlat +ellps=WGS84")
template
st_transform(AOI, "+proj=longlat +ellps=WGS84")
devtools::load_all(".")
st_transform(AOI, "+proj=longlat +ellps=WGS84")
ext <- raster::extent(AOI)
norths <- seq(ceiling(abs(ext@ymin)), ceiling(abs(ext@ymax)))
wests
seq(ceiling(abs(ext@xmax)), ceiling(abs(ext@xmin)))
# Open USGS NED download service.  NED tiles are labeled by their northwest corner.
wests <- seq(ceiling(abs(ext@xmax)), ceiling(abs(ext@xmin)))
norths <- seq(ceiling(abs(ext@ymin)), ceiling(abs(ext@ymax)))
tilesLocations <- as.matrix(expand.grid(norths, wests, stringsAsFactors = FALSE))
tilesLocations
message("Area of interest includes ", nrow(tilesLocations), " NED tiles.")
outdir = '/Volumes/Transcend/ngen/DEM/'
raw.dir <- normalizePath(paste0(outdir, "/", res), mustWork = FALSE)
dir.create(raw.dir, recursive = TRUE)
dir.create(raw.dir, recursive = TRUE)
raw.dir
raw.dir
dir.create(raw.dir, recursive = TRUE)
dir.create(raw.dir, recursive = TRUE)
devtools::load_all(".")
# Build DEM
library(sf)
library(dplyr)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAZMS5YKH7GRON5L42",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-1")
gdb = '/Volumes/Transcend/WBD_National_GDB/WBD_National_GDB.gdb'
layers = st_layers(gdb)
hucs = read_sf(gdb, 'WBDHU2') %>%
filter(huc2 <= 18) %>%
select(huc2)
for(i in 1:18){
AOI = hucs[i,] %>% st_make_valid()
output =   paste0('/Volumes/Transcend/ngen/DEM/huc', AOI$huc2,'-res-1.tif')
if(!file.exists(output)){
files = get_ned(AOI, res = '1')
merge_rasters(files, output_raster = output)
}
message(i)
}
